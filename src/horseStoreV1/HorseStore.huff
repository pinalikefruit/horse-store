// 1. Where did this data come from? How did Remix know to send this data?
//    1. 0xe026c0170000000000000000000000000000000000000000000000000000000000000001
//    2. How does the EVM know how to interpret/interact with data?
// 2. How does Remix know to update the number of horses with this data?


// The skeleton of our `MAIN` macro is outlined with the `takes` and `returns` syntax specifying the stack operations it will perform

// 60008060093d393df3 - Contract creation bytecode
// 60018060093d393df35f - add 5F push 0 onto the stack
// 60028060093d393df3 5f 35

/* Interface */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
    0x00               // [0]
    // 0x02           TOP [2,0] BOTTOM
    calldataload       // [calldata] take the 0 in the stack as a input offset for take the 32 bytes
    // 0xcdfead2e0000000000000000000000000000000000000000000000000000000000000009
    // first 32 bytes 0xe026c01700000000000000000000000000000000000000000000000000000000-00000001
    // shf 56/2(hex) * 8 (bits) = 224 
    // convert 225 dec to hex -> cast --to-base 224 hex 0xe0
    0xE0
    shr                      //[function_selector]

    // If f_select = 0xcdfead2e = updateHorseNumber -> jump to that data in the contract
    // If f_select = 0xe026c017 = readNumberOfHorses -> jump to that data in the contract 
    dup1                     // [function_selector, function selector]
    // updateHorseNumber selector 
    __FUNC_SIG(updateHorseNumber)               // [0xcdfead2e, function_selector, function selector]
    eq                       // [true/false, function selector]
    updateJump               // [updateHorseNumberProgramCounter, true/false, function selector]
    jumpi                    // [function selector]
    
    __FUNC_SIG(readNumberOfHorses)
    eq
    readJump
    jumpi

    0x00 0x00 revert                  // Don't find anything
    updateJump:                   // They add JUMPDEST here automatically 
        SET_NUMBER_OF_HORSES()

    // Logic for UpdateJump and  skip the readJumpDest
    readJump:
        GET_NUMBER_OF_HORSES()
    // Logic for readJump   
}

#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0){
    
    // 2. Get the value from the calldata
    0x04                         // [4] - Pushing '4' to the stack to be used as our bytes offset
    calldataload                 // [value] - Takes bytes offset from the stack, adds calldata offset by bytes offset to the stack
    // 1. Give it  a storage slot 
    [NUMBER_OF_HORSES_STORAGE_SLOT]         // [storage_slot, value]
    // 3. sstorage opcode
    sstore                        // Storage the value in storage at the given storage_slot
    stop
}

#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0){
    // 1. Get the storage slot 
    [NUMBER_OF_HORSES_STORAGE_SLOT]   // [key]
    // 2. Read value from the slot
    sload                             // [value]
    // 3. They add into stack return get from memory 
    0x00                              // [0x00, value]
    mstore                            // []      // memory: [value]
    // 3. Return 
    // 32 bytes == 0x20 take all the memory
    0x20 0x00  return

}   //0000000000000000000000000000000000000000000000000000000000000008

/// cast --to-base 0x0102 bin
/// 0b 10000 0000010

// For take the function selector:
// PUSH0
// calldataload
// PUSH1 0xE0
// SHR
